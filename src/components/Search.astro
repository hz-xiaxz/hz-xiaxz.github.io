---

---

<style>
  .search {
    margin-top: 3em;
    display: none;
  }
  .search.enabled {
    display: block;
  }
  .input-text {
    background-color: var(--main-bg-color);
    border: 1px solid var(--main-color);
    border-radius: 4px;
    color: white;
    padding: 0.3em 0.3em;
    text-decoration: none;
    font-size: 0.8rem;
    display: inline-block;
  }
</style>

<div class="search enabled">
  <div style="display: flex;">
    <div>Sort by:&nbsp;</div>
    <select id="search-sort" class="input-text">
      <option value="date">Date</option>
      <option value="title">Title</option>
      <option value="tag">Tags</option>
    </select>
  </div>
  <div id="search-text" style="display: flex; margin-top: 1em;">
    <div>Search:&nbsp;</div>
    <input type="text" placeholder="Keywords..." class="input-text" />
  </div>
</div>
<script>
  import type { CollectionEntry } from "astro:content";
  type BlogMeta = CollectionEntry<"blog">["data"];

  const searchText =
    document.querySelector<HTMLInputElement>("#search-text input");
  const searchSort = document.querySelector<HTMLSelectElement>("#search-sort");

  interface SearchItem {
    element: HTMLLIElement;
    id: string | null;
    data: BlogMeta;
  }
  let _searchItems: SearchItem[] = undefined!;
  let searchItems = () => {
    if (_searchItems === undefined) {
      _searchItems = Array.from(
        document.querySelectorAll<HTMLLIElement>(".posts > li")
      ).map((li) => {
        const articleId = li.dataset.articleId;
        const articleMeta = JSON.parse(li.dataset.articleMeta || "{}");
        if (articleMeta?.date) {
          articleMeta.date = new Date(articleMeta.date);
        }
        return {
          id: articleId!,
          data: articleMeta,
          element: li,
        };
      });
    }
    return _searchItems;
  };

  function runSearch(posts: SearchItem[], search?: string, sort?: string) {
    if (!search) search = undefined;
    if (!sort) sort = "date";
    // update the params
    const params = new URLSearchParams(window.location.search);
    if (search) {
      params.set("search", search);
      const usingSearch = search.toLowerCase();
      posts = posts.filter((post) => {
        const { title, desc, tags } = post.data;
        const text = `${title} ${desc} ${tags?.join(" ") || ""}`;
        return text.toLowerCase().includes(usingSearch);
      });
    } else {
      params.delete("search");
    }

    if (sort !== "date") {
      params.set("sort", sort);
      posts = posts.sort(
        sort === "date"
          ? (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
          : sort === "title"
            ? (a, b) => a.data.title.localeCompare(b.data.title)
            : (a, b) => {
                const aTags = a.data.tags || [];
                const bTags = b.data.tags || [];
                if (aTags.length !== bTags.length) {
                  return aTags.length - bTags.length;
                }
                for (let i = 0; i < aTags.length; i++) {
                  const aTag = aTags[i];
                  const bTag = bTags[i];
                  if (aTag !== bTag) {
                    return aTag.localeCompare(bTag);
                  }
                }
                return 0;
              }
      );
    } else {
      params.delete("sort");
    }

    const parent = document.querySelector<HTMLUListElement>(".posts");
    const existingKeys = parent?.children
      ? Array.from(parent.children).map(
          (li) => (li as HTMLLIElement).dataset.articleId
        )
      : [];

    if (existingKeys.toString() !== posts.map((post) => post.id).toString()) {
      parent?.replaceChildren(...posts.map((post) => post.element));
    }

    parent?.classList.remove("loading");

    let state = window.location.pathname;
    let paramsStr = params.toString();
    if (paramsStr) {
      state += "?" + paramsStr;
    }
    window.history.pushState({}, "", state);
  }

  searchText?.addEventListener("input", () => {
    runSearch(searchItems(), searchText.value, searchSort?.value);
  });

  searchSort?.addEventListener("change", () => {
    runSearch(searchItems(), searchText?.value, searchSort.value);
  });

  // get params
  const params = new URLSearchParams(window.location.search);
  const search = params.get("search") || undefined;
  const sort = params.get("sort") || undefined;
  if (searchText && search) {
    searchText.value = search;
  }
  if (searchSort && sort) {
    searchSort.value = sort;
  }
  runSearch(searchItems(), search, sort);
</script>
